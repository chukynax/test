# The first thing to apply is EC2NodeClass
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  role: "karpenter-eks-nodes-role"  
  amiFamily: AL2
  
  amiSelectorTerms:
    - alias: al2@latest  
  
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "karpenter-eks"  
  
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "karpenter-eks"  
  
  userData: |
    #!/bin/bash
    /etc/eks/bootstrap.sh karpenter-eks
  
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        deleteOnTermination: true

---
# NodePool for on-demand instances
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["c", "m", "r"]
        - key: karpenter.k8s.aws/instance-generation
          operator: Gt
          values: ["2"]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      expireAfter: 720h
      
      # taints:
      #   - key: "dedicated"
      #     value: "compute"
      #     effect: "NoSchedule"
  
  limits:
    cpu: 1000
  
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 1m
    # budgets:
    #   - nodes: 10%

---
# NodePool for spot Graviton instances
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: spot-graviton
spec:
  template:
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["arm64"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["c", "m", "r"]
        - key: karpenter.k8s.aws/instance-generation
          operator: Gt
          values: ["2"]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      expireAfter: 24h
      
      
      taints:
        - key: "karpenter.sh/capacity-type"
          value: "spot"
          effect: "NoSchedule"
  
  limits:
    cpu: 500
  
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 1m